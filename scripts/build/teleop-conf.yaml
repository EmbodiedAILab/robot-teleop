apiVersion: v1
kind: Secret
metadata:
  name: webrtc-server-secret
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRQ3MrMXFKTmh3TUpyMFkKcndWcTRpNFN3TmNsNHdwaFhYUGtHMjRPT2c2TDJxV1N2SGJycnhSWWc4NzZYb0Zkck9GZDdSVHZ5SWxla0dlaQpsVXJiM2U5QzhlWFdwVkROWVowS1B3dkxGMWFKeGxxUFpMOG9Gem5GYlRCYnNGK3duQ3d3ZzAzWnJvNTlzS2VFCm93djZtd1V5ZmE3VXAyN0N4ZTBFSWlhb0NaZXhDMmVPNHBKN0lCUm5Ed3A1Nk5uWDJINDJZNUdTby9ubkdmQWEKNHdmbjRrYU9xSi9JUHU4MHJPcFQ2dnR5R3Y1eHVlY0ZNcVh2KzlLaklTdDJYS1dIajRMZldNRkNvSHpQU1ZSeAo1TEdzK0JGdW9RRWUwdHdkOGNzNE1BM2QwbkFJcnExOS8wTTdHRkR5dlhKanczWTF2OXVYVGh4OGFYOExhSldBCmc1aFE2dFlYQWdNQkFBRUNnZ0VBQm54QnBXK3NkQkpiWVBUTzVoa205aVo4dS9YUVJMbmc5aFRIQW5KRVBQeEQKeFVXeUtHN1pFcHpiaythOXRSaXBlOTNXam1LR0FRcFpyNXo0a2VPSW14VTBlU2FidTNwdHg4Q1FSaFZjZGZYbgpTNmhGSVArcGp0T0duK09XeEV4V3BmbUdTSmZCdG1zMUhLSWUxazdYWlpaT2lZbktrcjg1ckwvUTJjRVEzRk54CnRoR2RBV2ZueDRUMllWamJ4U3YvcUZPQlM4RGJoZWluWUNYMHVWeXhLeDBRaDlHSGxqN0x5ZDZDVlhOeE5Od0IKQWxRSHQwMTVYNDdNWUpLNDZtbHNmc21DMC9ydHN2TGtYNW9GTFZNaXh2S3BCdkpmMUp0V0lJZ2Z0TVhEa09kZgpSK1FVMUJRek55Z2E0SnhRbFY1MWQzQ1VGaGp5aVdMTEhqeWw5eG15QVFLQmdRREw3V0RwbHp2N3o1Zy9jUC82CmNrN3U5RGxBc1k3MjNzbXp3WnFVQ1F0dFRkaUs2TnZQM1FIYjBjY0Q1T29BK1Y4dkZaYUtreGppTTJpeGhDUU4KRVUvV3hCL2kvTW9VQjE5dk8yVlB4Z1h1bmlQR3luRnQ0NWxIUVpocFJiQTdFWk5aaVZ3T0R4bHFEQkZCaXR3cAp0eHNuU3A4SVZncWFKVUJrMWsrR2hDMGhRUUtCZ1FEWkp4Ymd3dkxKUjNJcGxpZVNnS1oramZNMkdFa3ViWFBLCmg0NHYwa1BQNmxtbHFMcTlpdWhwR2czSVBEdGxzK1pUVk05MUpkMWdEbnhSczBXQzVtQnh4dDNzY0Vib3dYeXoKYjJ0TUVtZzMwRmJqb1F5NjA4S0Fya3dsNGp6KzBBRTBiMWZRYWlMa1dwbkxGY0lCOHFOc2Z2bEZzU2ZIWHB5UQpMdkhTbDlsSlZ3S0JnRUJaUDJOMlhXOHdLcEthVGF2eHRnYWcrZy8zOTJ6ZkVEYXd1TjVObkZWNVl3TXlSMnBvCkN0WWFjL28rbWJpRStBd2JlODF1YlVPemhTMit6TUZ5M1FhZ0RJL0x4TmhkR3pnMlBkbldXcmpaSGVEMHNLWkUKVTNHd3VTOCsxa1ZOWG5tNlpsbnBXZE9reXkwcmJCMmRzZXZNR0RMQk04ZEFTZm1IeHNCanBQb0JBb0dBZEJVNwpXNmViVmhJRmEwbkRtY09BUFlMd2t1aGtwcGNJSVNwWnppS2U4WlNibTcwWkpwNE5JN0l6eitpeTcrazlwU3BmClJJYWJVdkFyY1JsZWZWMWVEVFI4Q2hyekxSWFI3YklRTDdoZlVnYmpqQWZaNEQyM2FrYkNtalhZMlhha1RqMS8KT2dDaTZtT3NkeTRJYWpZbE9xaWQ1SzJSVURpNWhUSXpQNXJCSXowQ2dZQnNJblNFSzNBSEVYZzluWlZUbzRYegpURWhPaVc4Q3BCdHhUTXdhdk1lRFVxYmZsSTJVK3MvSFIyTkNPcjFPQ2t5YzBOVDg2N2ZGSzZCdXR2S3k4ZFQxCjR1UUVvQUQvUzllMnVLclhYN0N1M0VBOG9Bc2k4Qmlxakc5cWYybFFOT21BcnMyd0wyYzAwNXNtSE9QRDJCcWkKeDNUa0JtaVJFeFZNMm9BVzA0cjQ3dz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURPekNDQWlNQ0ZGSFREN2dySGpEajFzRTRwdVJXdTFscEhlTWhNQTBHQ1NxR1NJYjNEUUVCQ3dVQU1Gb3gKQ3pBSkJnTlZCQVlUQWtOT01STXdFUVlEVlFRSURBcFRiMjFsTFZOMFlYUmxNU0V3SHdZRFZRUUtEQmhKYm5SbApjbTVsZENCWGFXUm5hWFJ6SUZCMGVTQk1kR1F4RXpBUkJnTlZCQU1NQ25KMFl5MXpaWEoyWlhJd0hoY05Nak13Ck1qRXpNRGN6TURRMVdoY05Nek13TWpFd01EY3pNRFExV2pCYU1Rc3dDUVlEVlFRR0V3SkRUakVUTUJFR0ExVUUKQ0F3S1UyOXRaUzFUZEdGMFpURWhNQjhHQTFVRUNnd1lTVzUwWlhKdVpYUWdWMmxrWjJsMGN5QlFkSGtnVEhSawpNUk13RVFZRFZRUUREQXB5ZEdNdGMyVnlkbVZ5TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCCkNnS0NBUUVBclB0YWlUWWNEQ2E5R0s4RmF1SXVFc0RYSmVNS1lWMXo1QnR1RGpvT2k5cWxrcngyNjY4VVdJUE8KK2w2QlhhemhYZTBVNzhpSlhwQm5vcFZLMjkzdlF2SGwxcVZReldHZENqOEx5eGRXaWNaYWoyUy9LQmM1eFcwdwpXN0Jmc0p3c01JTk4yYTZPZmJDbmhLTUwrcHNGTW4ydTFLZHV3c1h0QkNJbXFBbVhzUXRuanVLU2V5QVVadzhLCmVlaloxOWgrTm1PUmtxUDU1eG53R3VNSDUrSkdqcWlmeUQ3dk5LenFVK3I3Y2hyK2Nibm5CVEtsNy92U295RXIKZGx5bGg0K0MzMWpCUXFCOHowbFVjZVN4clBnUmJxRUJIdExjSGZITE9EQU4zZEp3Q0s2dGZmOURPeGhROHIxeQpZOE4yTmIvYmwwNGNmR2wvQzJpVmdJT1lVT3JXRndJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNtCnFPVG4vLzhtMitBbklCUFoxTGFlNDhCZCtwWE9yQWFBVUNGK3pWU2w0T0VhVEhxODdublJaSkZ6WHoyOFZsRmIKYmdxd1hsMVJvZlZRcGFCYkZYV1FUSzBoQW1sa2pzTCtlcHdLQlI3VVRKYmp5Wmg0b1M1M2IzdmRyNVY5ZEhPOQo4YzFGdndlUmg0NEhQVFFDWkdhRWxGNGFjUjZIM3BmWmQxU0VZRkdiMlYzOW43OUxpR1lwT0RMQ3NwUlhUVlBwCnd4b2lCWTl3Q295UW9ObXkxUHRqamJpZnJTbFo1SGJEZEV0M0FTTVZyYmpnMTlTSkJZZDlzQnR0d3lIUWpXMmQKSXc5VmZPL3U0SDRvRkFlalptK2RmM25IQVZtbjFlOXlsc0RTUzJac2xNc29QU2RHNGorMUlDQWRoTzVNTnUvYgplcU5HM1B6eTVXSFpRVVEvL0JSdwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRQ3MrMXFKTmh3TUpyMFkKcndWcTRpNFN3TmNsNHdwaFhYUGtHMjRPT2c2TDJxV1N2SGJycnhSWWc4NzZYb0Zkck9GZDdSVHZ5SWxla0dlaQpsVXJiM2U5QzhlWFdwVkROWVowS1B3dkxGMWFKeGxxUFpMOG9Gem5GYlRCYnNGK3duQ3d3ZzAzWnJvNTlzS2VFCm93djZtd1V5ZmE3VXAyN0N4ZTBFSWlhb0NaZXhDMmVPNHBKN0lCUm5Ed3A1Nk5uWDJINDJZNUdTby9ubkdmQWEKNHdmbjRrYU9xSi9JUHU4MHJPcFQ2dnR5R3Y1eHVlY0ZNcVh2KzlLaklTdDJYS1dIajRMZldNRkNvSHpQU1ZSeAo1TEdzK0JGdW9RRWUwdHdkOGNzNE1BM2QwbkFJcnExOS8wTTdHRkR5dlhKanczWTF2OXVYVGh4OGFYOExhSldBCmc1aFE2dFlYQWdNQkFBRUNnZ0VBQm54QnBXK3NkQkpiWVBUTzVoa205aVo4dS9YUVJMbmc5aFRIQW5KRVBQeEQKeFVXeUtHN1pFcHpiaythOXRSaXBlOTNXam1LR0FRcFpyNXo0a2VPSW14VTBlU2FidTNwdHg4Q1FSaFZjZGZYbgpTNmhGSVArcGp0T0duK09XeEV4V3BmbUdTSmZCdG1zMUhLSWUxazdYWlpaT2lZbktrcjg1ckwvUTJjRVEzRk54CnRoR2RBV2ZueDRUMllWamJ4U3YvcUZPQlM4RGJoZWluWUNYMHVWeXhLeDBRaDlHSGxqN0x5ZDZDVlhOeE5Od0IKQWxRSHQwMTVYNDdNWUpLNDZtbHNmc21DMC9ydHN2TGtYNW9GTFZNaXh2S3BCdkpmMUp0V0lJZ2Z0TVhEa09kZgpSK1FVMUJRek55Z2E0SnhRbFY1MWQzQ1VGaGp5aVdMTEhqeWw5eG15QVFLQmdRREw3V0RwbHp2N3o1Zy9jUC82CmNrN3U5RGxBc1k3MjNzbXp3WnFVQ1F0dFRkaUs2TnZQM1FIYjBjY0Q1T29BK1Y4dkZaYUtreGppTTJpeGhDUU4KRVUvV3hCL2kvTW9VQjE5dk8yVlB4Z1h1bmlQR3luRnQ0NWxIUVpocFJiQTdFWk5aaVZ3T0R4bHFEQkZCaXR3cAp0eHNuU3A4SVZncWFKVUJrMWsrR2hDMGhRUUtCZ1FEWkp4Ymd3dkxKUjNJcGxpZVNnS1oramZNMkdFa3ViWFBLCmg0NHYwa1BQNmxtbHFMcTlpdWhwR2czSVBEdGxzK1pUVk05MUpkMWdEbnhSczBXQzVtQnh4dDNzY0Vib3dYeXoKYjJ0TUVtZzMwRmJqb1F5NjA4S0Fya3dsNGp6KzBBRTBiMWZRYWlMa1dwbkxGY0lCOHFOc2Z2bEZzU2ZIWHB5UQpMdkhTbDlsSlZ3S0JnRUJaUDJOMlhXOHdLcEthVGF2eHRnYWcrZy8zOTJ6ZkVEYXd1TjVObkZWNVl3TXlSMnBvCkN0WWFjL28rbWJpRStBd2JlODF1YlVPemhTMit6TUZ5M1FhZ0RJL0x4TmhkR3pnMlBkbldXcmpaSGVEMHNLWkUKVTNHd3VTOCsxa1ZOWG5tNlpsbnBXZE9reXkwcmJCMmRzZXZNR0RMQk04ZEFTZm1IeHNCanBQb0JBb0dBZEJVNwpXNmViVmhJRmEwbkRtY09BUFlMd2t1aGtwcGNJSVNwWnppS2U4WlNibTcwWkpwNE5JN0l6eitpeTcrazlwU3BmClJJYWJVdkFyY1JsZWZWMWVEVFI4Q2hyekxSWFI3YklRTDdoZlVnYmpqQWZaNEQyM2FrYkNtalhZMlhha1RqMS8KT2dDaTZtT3NkeTRJYWpZbE9xaWQ1SzJSVURpNWhUSXpQNXJCSXowQ2dZQnNJblNFSzNBSEVYZzluWlZUbzRYegpURWhPaVc4Q3BCdHhUTXdhdk1lRFVxYmZsSTJVK3MvSFIyTkNPcjFPQ2t5YzBOVDg2N2ZGSzZCdXR2S3k4ZFQxCjR1UUVvQUQvUzllMnVLclhYN0N1M0VBOG9Bc2k4Qmlxakc5cWYybFFOT21BcnMyd0wyYzAwNXNtSE9QRDJCcWkKeDNUa0JtaVJFeFZNMm9BVzA0cjQ3dz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
apiVersion: v1
kind: Secret
metadata:
  name: sys-secret
type: Opaque
data:
  PASSWORD: S3ViZUVkZ2VTZWNyZXQK

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: teleop-config
  namespace: default
data:
  teleop-ice-servers: |
    {
      'urls': [
          'turn:coturn-svc:12345?transport=udp',
          'stun:stun.l.google.com:19302',
          'stun:stun.l.google.com:19302?transport=udp',
      ]
    }
  teleop-server.entrypoint: |
    #!/bin/sh
    set -euo pipefail
    echo "########################################"
    echo "# Apply additional env to openvidu #"
    echo "########################################"
    TPL="/.env-tpl"
    ENVFILE="/.env"
    ENDPOINT="/usr/local/bin/entrypoint.sh"
    if [ ! -f ${TPL} ] || [ ! -z ${OPENVIDU_SECRET} ]; then
     while true ; do
       echo "env does not exists, sleep loop"
       sleep 3600
     done
    else
     cp ${TPL} ${ENVFILE} 
     echo OPENVIDU_SECRET=${OPENVIDU_SECRET} >> ${ENVFILE}
     chmod +x ${ENDPOINT}
     ${ENDPOINT} 
    fi
  teleop-server.env: |
    COTURN_IP=coturn-svc.default.svc.cluster.local
    COTURN_PORT=12345
    COTURN_REDIS_IP=redis-svc
    DOMAIN_OR_PUBLIC_IP=rtc-server
    CERTIFICATE_TYPE=owncert
    HTTPS_PORT=443
    HTTP_PORT=80
    KMS_URIS=["ws://kms.default:8888/kurento"]
    OPENVIDU_CDR=false
    OPENVIDU_CDR_PATH=/opt/openvidu/cdr
    OPENVIDU_RECORDING=false
    OPENVIDU_RECORDING_AUTOSTOP_TIMEOUT=120
    OPENVIDU_RECORDING_CUSTOM_LAYOUT=/opt/openvidu/custom-layout
    OPENVIDU_RECORDING_DEBUG=false
    OPENVIDU_RECORDING_NOTIFICATION=publisher_moderator
    OPENVIDU_RECORDING_PATH=/opt/openvidu/recordings
    OPENVIDU_RECORDING_PUBLIC_ACCESS=false
    OPENVIDU_WEBHOOK=false
    OPENVIDU_WEBHOOK_EVENTS=[sessionCreated,sessionDestroyed,participantJoined,participantLeft,webrtcConnectionCreated,webrtcConnectionDestroyed,recordingStatusChanged,filterEventDispatched,mediaNodeStatusChanged,nodeCrashed]
    SERVER_PORT=5443
    SERVER_SSL_ENABLED=false
  teleop-server.yaml: |
    map:
      name: "teleoperation"
      driver: "ros_pgm_map"
      param:
        save_url: "/tmp"
    service:
      driver: "rtc_teleop_server"
  teleop-robot.yaml: |
    name: "agilex"
    manufacturer: "agilex"
    series: "scout"
    description: "Wheeled trolley with operating arm"
    environment:
      backend: "ros1"  # ros1 / ros2 / harmony
      requirement:
        - rospy
        - rostopic
        - roslib
    sensors:
      camera:
        - name: "camera_front"
          config: "realsense435i"
          rgb:
            target: "/camera/color/image_raw" # Topic in ros or function in class
            actual_hz: 10
            origin_hz: 30
            is_compressed: false
          depth:
            target: "/camera/depth/image_rect_raw"
            aligned_depth_to_color: "/camera/aligned_depth_to_color/image_raw"
          info:
            target: "/camera/color/camera_info"
        - name: "camera_arm"
          config: "realsense435i"
          rgb:
            target: "/cam1/color/image_raw"
            actual_hz: 10
            origin_hz: 30
            is_compressed: false
          depth:
            target: "/cam1/depth/image_rect_raw"
            aligned_depth_to_color: "/cam1/aligned_depth_to_color/image_raw"
          info:
            target: "/cam1/color/camera_info"
      battery:
        - name: "battery"
          config: "simplebattery"
          data:
            target: "/battery_level"
            actual_hz: 1
            origin_hz: 10
      odom:
        - name: "odom"
          config: "transform"
          data:
            target: "/tf"
      lidar:
        - name: "laser"
          config: "simplelaser"
          data:
            target: "/scan"
            laser_frame: "velodyne"
      maps:
        - name: "maps"
          config: "simplemap"
          data:
            map: "/map"
            meta: "/map_meta"
            kind: "topic"
    control:
      - motion:
          name: "ros_cmd_vel"
          config: "cmd_vel"

  